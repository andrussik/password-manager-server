// <auto-generated />
using System;
using Infrastructure.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.DB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220428221406_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:db_collation", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .UseCollation("db_collation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_cultures");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_cultures_code");

                    b.ToTable("cultures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cfb2a30-98da-48ea-b97f-6fe28ee64c91"),
                            Code = "en-GB",
                            Name = "English (United Kingdom)"
                        },
                        new
                        {
                            Id = new Guid("044da860-268b-44df-b171-09e9238bcd48"),
                            Code = "et-EE",
                            Name = "Estonian (Estonia)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("db_collation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GroupInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("InvitedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invited_at");

                    b.Property<Guid>("InvitedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_by_user_id");

                    b.Property<Guid>("InvitedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("invited_user_id");

                    b.HasKey("Id")
                        .HasName("pk_group_invitations");

                    b.HasIndex("InvitedByUserId")
                        .HasDatabaseName("ix_group_invitations_invited_by_user_id");

                    b.HasIndex("InvitedUserId")
                        .HasDatabaseName("ix_group_invitations_invited_user_id");

                    b.ToTable("group_invitations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GroupRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_group_roles");

                    b.ToTable("group_roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfecfc02-da76-45eb-8eda-bde7bb03c738"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("0813fc0a-0719-4ea1-b99a-e46f50574e0b"),
                            Name = "Owner"
                        },
                        new
                        {
                            Id = new Guid("7e8edd0e-be29-4fa7-aba8-3031423a4d7f"),
                            Name = "Writer"
                        },
                        new
                        {
                            Id = new Guid("e02a0e63-1474-4c68-b16f-5692c75bc347"),
                            Name = "Reader"
                        });
                });

            modelBuilder.Entity("Domain.Entities.GroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("GroupRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_group_users");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_users_group_id");

                    b.HasIndex("GroupRoleId")
                        .HasDatabaseName("ix_group_users_group_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_group_users_user_id");

                    b.ToTable("group_users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("jwt_id")
                        .UseCollation("db_collation");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token")
                        .UseCollation("db_collation");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uuid")
                        .HasColumnName("culture_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("db_collation");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("ix_resources_culture_id");

                    b.HasIndex("Key", "CultureId")
                        .IsUnique()
                        .HasDatabaseName("ix_resources_key_culture_id");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Secret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .UseCollation("db_collation");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("name")
                        .UseCollation("db_collation");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password")
                        .UseCollation("db_collation");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("username")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_secrets");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_secrets_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_secrets_user_id");

                    b.ToTable("secrets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("db_collation");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_settings_key");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .UseCollation("db_collation");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key")
                        .UseCollation("db_collation");

                    b.Property<string>("MasterPasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("master_password_hash")
                        .UseCollation("db_collation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .UseCollation("db_collation");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.GroupInvitation", b =>
                {
                    b.HasOne("Domain.Entities.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_invitations_users_invited_by_user_id");

                    b.HasOne("Domain.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_invitations_users_invited_user_id");

                    b.Navigation("InvitedByUser");

                    b.Navigation("InvitedUser");
                });

            modelBuilder.Entity("Domain.Entities.GroupUser", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_users_groups_group_id");

                    b.HasOne("Domain.Entities.GroupRole", "GroupRole")
                        .WithMany()
                        .HasForeignKey("GroupRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_users_group_roles_group_role_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_group_users_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("GroupRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.HasOne("Domain.Entities.Culture", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_resources_cultures_culture_id");

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("Domain.Entities.Secret", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Secrets")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_secrets_groups_group_id");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Secrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_secrets_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Culture", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
